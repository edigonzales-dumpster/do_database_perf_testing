import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

apply from: "$rootDir/datasets.groovy"

def pathToTempFolder = System.getProperty("java.io.tmpdir") + "/gretl-share/"
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")

datasets.each { dataset ->
    def modelNames = dataset.models
    def schema = dataset.dbschema
    def datasetId = dataset.datasetId

    task "downloadDataset_$datasetId"(type: Download) {
        description = "Download Data: ${datasetId}"
        src "https://s3.eu-central-1.amazonaws.com/ch.so.agi.geodata/${datasetId}_xtf.zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "unzipData_$datasetId"(type: Copy, dependsOn: "downloadDataset_$datasetId") {
        description = "Unzip Data: ${datasetId}"
        from zipTree(Paths.get(pathToTempFolder, datasetId+"_xtf.zip"))
        into file(pathToUnzipFolder)
        include "**/*.xtf"
        rename { String fileName ->
            if (fileName.contains(datasetId)) {
                return datasetId+".xtf"
            }
            return fileName
        }
    }

    task "importData_$datasetId"(type: Ili2pgImport, dependsOn: "unzipData_$datasetId") {
        description = "Import Data: ${datasetId}"
        database = [dbUriDo, dbUserDo, dbPwdDo]
        dbschema = schema
        models = modelNames
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), datasetId+".xtf"))
        disableValidation = true
        deleteData = true
        if (datasetId.equalsIgnoreCase("ch.so.arp.nutzungsplanung")) disableRounding = true
    }
}

task importAllData() {
    description = "Aggregation task (Datenimport)."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('importData_') }
    }
}


// DDL: Datenbankschema anlegen 
datasets.each { dataset ->
    def modelNames = dataset.models
    def schema = dataset.dbschema
    def datasetId = dataset.datasetId

    task "schemaImport_$datasetId"(type: Ili2pgImportSchema) {
        database = [dbUriDo, dbUserDoDdl, dbPwdDoDdl]
        dbschema = schema
        models = modelNames
        defaultSrsCode = 2056 
        createGeomIdx = true 
        createFk = true
        createFkIdx = true
        createUnique = true
        createEnumTabs = true
        beautifyEnumDispName = true
        createMetaInfo = true
        createNumChecks = true
        nameByTopic = true
        strokeArcs = true
        coalesceJson = true
    }

    task "grant_$datasetId"(type: SqlExecutor, dependsOn: "schemaImport_$datasetId") {
        database = [dbUriDo, dbUserDoDdl, dbPwdDoDdl]
        sqlParameters = [dbschema:schema]
        sqlFiles = ['postscript.sql']
    }
}

task schemaImportAllData() {
    description = "Aggregation task (Schema erstellen)."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('grant_') }
    }
}